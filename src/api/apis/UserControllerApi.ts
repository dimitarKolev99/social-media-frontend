// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ComExampleSpringDemoApiUserDtoUser,
    ComExampleSpringDemoLoginRefreshtokenErrorMessage,
} from '../models';

export interface CreateUserRequest {
    comExampleSpringDemoApiUserDtoUser: ComExampleSpringDemoApiUserDtoUser;
}

export interface DeleteTutorialRequest {
    id: number;
}

export interface GetAllUserRequest {
    username?: string;
}

export interface GetUserByIdRequest {
    id: number;
}

export interface UpdateUserRequest {
    id: number;
    comExampleSpringDemoApiUserDtoUser: ComExampleSpringDemoApiUserDtoUser;
}

/**
 * no description
 */
export class UserControllerApi extends BaseAPI {

    /**
     */
    createUser({ comExampleSpringDemoApiUserDtoUser }: CreateUserRequest): Observable<ComExampleSpringDemoApiUserDtoUser>
    createUser({ comExampleSpringDemoApiUserDtoUser }: CreateUserRequest, opts?: OperationOpts): Observable<AjaxResponse<ComExampleSpringDemoApiUserDtoUser>>
    createUser({ comExampleSpringDemoApiUserDtoUser }: CreateUserRequest, opts?: OperationOpts): Observable<ComExampleSpringDemoApiUserDtoUser | AjaxResponse<ComExampleSpringDemoApiUserDtoUser>> {
        throwIfNullOrUndefined(comExampleSpringDemoApiUserDtoUser, 'comExampleSpringDemoApiUserDtoUser', 'createUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ComExampleSpringDemoApiUserDtoUser>({
            url: '/api/users',
            method: 'POST',
            headers,
            body: comExampleSpringDemoApiUserDtoUser,
        }, opts?.responseOpts);
    };

    /**
     */
    deleteAllUsers(): Observable<string>
    deleteAllUsers(opts?: OperationOpts): Observable<AjaxResponse<string>>
    deleteAllUsers(opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        return this.request<string>({
            url: '/api/users',
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     */
    deleteTutorial({ id }: DeleteTutorialRequest): Observable<string>
    deleteTutorial({ id }: DeleteTutorialRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    deleteTutorial({ id }: DeleteTutorialRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(id, 'id', 'deleteTutorial');

        return this.request<string>({
            url: '/api/users/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     */
    getAllUser({ username }: GetAllUserRequest): Observable<Array<ComExampleSpringDemoApiUserDtoUser>>
    getAllUser({ username }: GetAllUserRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<ComExampleSpringDemoApiUserDtoUser>>>
    getAllUser({ username }: GetAllUserRequest, opts?: OperationOpts): Observable<Array<ComExampleSpringDemoApiUserDtoUser> | AjaxResponse<Array<ComExampleSpringDemoApiUserDtoUser>>> {

        const query: HttpQuery = {};

        if (username != null) { query['username'] = username; }

        return this.request<Array<ComExampleSpringDemoApiUserDtoUser>>({
            url: '/api/users',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getUserById({ id }: GetUserByIdRequest): Observable<ComExampleSpringDemoApiUserDtoUser>
    getUserById({ id }: GetUserByIdRequest, opts?: OperationOpts): Observable<AjaxResponse<ComExampleSpringDemoApiUserDtoUser>>
    getUserById({ id }: GetUserByIdRequest, opts?: OperationOpts): Observable<ComExampleSpringDemoApiUserDtoUser | AjaxResponse<ComExampleSpringDemoApiUserDtoUser>> {
        throwIfNullOrUndefined(id, 'id', 'getUserById');

        return this.request<ComExampleSpringDemoApiUserDtoUser>({
            url: '/api/users/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    updateUser({ id, comExampleSpringDemoApiUserDtoUser }: UpdateUserRequest): Observable<ComExampleSpringDemoApiUserDtoUser>
    updateUser({ id, comExampleSpringDemoApiUserDtoUser }: UpdateUserRequest, opts?: OperationOpts): Observable<AjaxResponse<ComExampleSpringDemoApiUserDtoUser>>
    updateUser({ id, comExampleSpringDemoApiUserDtoUser }: UpdateUserRequest, opts?: OperationOpts): Observable<ComExampleSpringDemoApiUserDtoUser | AjaxResponse<ComExampleSpringDemoApiUserDtoUser>> {
        throwIfNullOrUndefined(id, 'id', 'updateUser');
        throwIfNullOrUndefined(comExampleSpringDemoApiUserDtoUser, 'comExampleSpringDemoApiUserDtoUser', 'updateUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ComExampleSpringDemoApiUserDtoUser>({
            url: '/api/users/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: comExampleSpringDemoApiUserDtoUser,
        }, opts?.responseOpts);
    };

}

// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ComExampleSpringDemoApiPostDtoPost,
    ComExampleSpringDemoApiPostDtoRequestPostRequest,
    ComExampleSpringDemoLoginRefreshtokenErrorMessage,
} from '../models';

export interface AddPostOnCurrentUserRequest {
    comExampleSpringDemoApiPostDtoRequestPostRequest: ComExampleSpringDemoApiPostDtoRequestPostRequest;
}

export interface CreatePostRequest {
    userId: number;
    comExampleSpringDemoApiPostDtoRequestPostRequest: ComExampleSpringDemoApiPostDtoRequestPostRequest;
}

export interface DeleteAllPostsOfUserRequest {
    userId: number;
}

export interface DeletePostRequest {
    id: number;
}

export interface GetAllPostsRequest {
    page?: number;
    size?: number;
}

export interface GetAllPostsByUserIdRequest {
    id: number;
}

export interface GetPostByIdRequest {
    id: number;
}

export interface UpdatePostRequest {
    id: number;
    comExampleSpringDemoApiPostDtoRequestPostRequest: ComExampleSpringDemoApiPostDtoRequestPostRequest;
}

/**
 * no description
 */
export class PostControllerApi extends BaseAPI {

    /**
     */
    addPostOnCurrentUser({ comExampleSpringDemoApiPostDtoRequestPostRequest }: AddPostOnCurrentUserRequest): Observable<ComExampleSpringDemoApiPostDtoPost>
    addPostOnCurrentUser({ comExampleSpringDemoApiPostDtoRequestPostRequest }: AddPostOnCurrentUserRequest, opts?: OperationOpts): Observable<AjaxResponse<ComExampleSpringDemoApiPostDtoPost>>
    addPostOnCurrentUser({ comExampleSpringDemoApiPostDtoRequestPostRequest }: AddPostOnCurrentUserRequest, opts?: OperationOpts): Observable<ComExampleSpringDemoApiPostDtoPost | AjaxResponse<ComExampleSpringDemoApiPostDtoPost>> {
        throwIfNullOrUndefined(comExampleSpringDemoApiPostDtoRequestPostRequest, 'comExampleSpringDemoApiPostDtoRequestPostRequest', 'addPostOnCurrentUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ComExampleSpringDemoApiPostDtoPost>({
            url: '/api/posts',
            method: 'POST',
            headers,
            body: comExampleSpringDemoApiPostDtoRequestPostRequest,
        }, opts?.responseOpts);
    };

    /**
     */
    createPost({ userId, comExampleSpringDemoApiPostDtoRequestPostRequest }: CreatePostRequest): Observable<ComExampleSpringDemoApiPostDtoPost>
    createPost({ userId, comExampleSpringDemoApiPostDtoRequestPostRequest }: CreatePostRequest, opts?: OperationOpts): Observable<AjaxResponse<ComExampleSpringDemoApiPostDtoPost>>
    createPost({ userId, comExampleSpringDemoApiPostDtoRequestPostRequest }: CreatePostRequest, opts?: OperationOpts): Observable<ComExampleSpringDemoApiPostDtoPost | AjaxResponse<ComExampleSpringDemoApiPostDtoPost>> {
        throwIfNullOrUndefined(userId, 'userId', 'createPost');
        throwIfNullOrUndefined(comExampleSpringDemoApiPostDtoRequestPostRequest, 'comExampleSpringDemoApiPostDtoRequestPostRequest', 'createPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ComExampleSpringDemoApiPostDtoPost>({
            url: '/api/users/{userId}/posts'.replace('{userId}', encodeURI(userId)),
            method: 'POST',
            headers,
            body: comExampleSpringDemoApiPostDtoRequestPostRequest,
        }, opts?.responseOpts);
    };

    /**
     */
    deleteAllPostsOfUser({ userId }: DeleteAllPostsOfUserRequest): Observable<string>
    deleteAllPostsOfUser({ userId }: DeleteAllPostsOfUserRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    deleteAllPostsOfUser({ userId }: DeleteAllPostsOfUserRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(userId, 'userId', 'deleteAllPostsOfUser');

        return this.request<string>({
            url: '/api/users/{userId}/posts'.replace('{userId}', encodeURI(userId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     */
    deletePost({ id }: DeletePostRequest): Observable<string>
    deletePost({ id }: DeletePostRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    deletePost({ id }: DeletePostRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(id, 'id', 'deletePost');

        return this.request<string>({
            url: '/api/posts/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     */
    getAllPosts({ page, size }: GetAllPostsRequest): Observable<{ [key: string]: object; }>
    getAllPosts({ page, size }: GetAllPostsRequest, opts?: OperationOpts): Observable<AjaxResponse<{ [key: string]: object; }>>
    getAllPosts({ page, size }: GetAllPostsRequest, opts?: OperationOpts): Observable<{ [key: string]: object; } | AjaxResponse<{ [key: string]: object; }>> {

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (size != null) { query['size'] = size; }

        return this.request<{ [key: string]: object; }>({
            url: '/api/posts',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getAllPostsByUserId({ id }: GetAllPostsByUserIdRequest): Observable<Array<ComExampleSpringDemoApiPostDtoPost>>
    getAllPostsByUserId({ id }: GetAllPostsByUserIdRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<ComExampleSpringDemoApiPostDtoPost>>>
    getAllPostsByUserId({ id }: GetAllPostsByUserIdRequest, opts?: OperationOpts): Observable<Array<ComExampleSpringDemoApiPostDtoPost> | AjaxResponse<Array<ComExampleSpringDemoApiPostDtoPost>>> {
        throwIfNullOrUndefined(id, 'id', 'getAllPostsByUserId');

        return this.request<Array<ComExampleSpringDemoApiPostDtoPost>>({
            url: '/api/users/{id}/posts'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    getPostById({ id }: GetPostByIdRequest): Observable<ComExampleSpringDemoApiPostDtoPost>
    getPostById({ id }: GetPostByIdRequest, opts?: OperationOpts): Observable<AjaxResponse<ComExampleSpringDemoApiPostDtoPost>>
    getPostById({ id }: GetPostByIdRequest, opts?: OperationOpts): Observable<ComExampleSpringDemoApiPostDtoPost | AjaxResponse<ComExampleSpringDemoApiPostDtoPost>> {
        throwIfNullOrUndefined(id, 'id', 'getPostById');

        return this.request<ComExampleSpringDemoApiPostDtoPost>({
            url: '/api/posts/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    updatePost({ id, comExampleSpringDemoApiPostDtoRequestPostRequest }: UpdatePostRequest): Observable<ComExampleSpringDemoApiPostDtoPost>
    updatePost({ id, comExampleSpringDemoApiPostDtoRequestPostRequest }: UpdatePostRequest, opts?: OperationOpts): Observable<AjaxResponse<ComExampleSpringDemoApiPostDtoPost>>
    updatePost({ id, comExampleSpringDemoApiPostDtoRequestPostRequest }: UpdatePostRequest, opts?: OperationOpts): Observable<ComExampleSpringDemoApiPostDtoPost | AjaxResponse<ComExampleSpringDemoApiPostDtoPost>> {
        throwIfNullOrUndefined(id, 'id', 'updatePost');
        throwIfNullOrUndefined(comExampleSpringDemoApiPostDtoRequestPostRequest, 'comExampleSpringDemoApiPostDtoRequestPostRequest', 'updatePost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ComExampleSpringDemoApiPostDtoPost>({
            url: '/api/posts/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: comExampleSpringDemoApiPostDtoRequestPostRequest,
        }, opts?.responseOpts);
    };

}

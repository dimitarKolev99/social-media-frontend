// tslint:disable
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AddPostOnCurrentUserRequest,
    ErrorMessage,
    Post,
    PostRequest,
    ResponseMessage,
} from '../models';

export interface AddPostOnCurrentUserRequest {
    addPostOnCurrentUserRequest?: AddPostOnCurrentUserRequest;
}

export interface CreatePostRequest {
    userId: number;
    postRequest: PostRequest;
}

export interface DeleteAllPostsOfUserRequest {
    userId: number;
}

export interface DeletePostRequest {
    id: number;
}

export interface GetAllPostsRequest {
    page?: number;
    size?: number;
}

export interface GetAllPostsByUserIdRequest {
    id: number;
}

export interface GetPostByIdRequest {
    id: number;
}

export interface UpdatePostRequest {
    id: number;
    postRequest: PostRequest;
}

export interface UploadProfilePicRequest {
    file: Blob;
}

/**
 * no description
 */
export class PostControllerApi extends BaseAPI {

    /**
     */
    addPostOnCurrentUser({ addPostOnCurrentUserRequest }: AddPostOnCurrentUserRequest): Observable<ResponseMessage>
    addPostOnCurrentUser({ addPostOnCurrentUserRequest }: AddPostOnCurrentUserRequest, opts?: OperationOpts): Observable<AjaxResponse<ResponseMessage>>
    addPostOnCurrentUser({ addPostOnCurrentUserRequest }: AddPostOnCurrentUserRequest, opts?: OperationOpts): Observable<ResponseMessage | AjaxResponse<ResponseMessage>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<ResponseMessage>({
            url: '/api/posts',
            method: 'POST',
            headers,
            body: addPostOnCurrentUserRequest,
        }, opts?.responseOpts);
    };

    /**
     */
    createPost({ userId, postRequest }: CreatePostRequest): Observable<Post>
    createPost({ userId, postRequest }: CreatePostRequest, opts?: OperationOpts): Observable<AjaxResponse<Post>>
    createPost({ userId, postRequest }: CreatePostRequest, opts?: OperationOpts): Observable<Post | AjaxResponse<Post>> {
        throwIfNullOrUndefined(userId, 'userId', 'createPost');
        throwIfNullOrUndefined(postRequest, 'postRequest', 'createPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<Post>({
            url: '/api/users/{userId}/posts'.replace('{userId}', encodeURI(userId)),
            method: 'POST',
            headers,
            body: postRequest,
        }, opts?.responseOpts);
    };

    /**
     */
    deleteAllPostsOfUser({ userId }: DeleteAllPostsOfUserRequest): Observable<string>
    deleteAllPostsOfUser({ userId }: DeleteAllPostsOfUserRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    deleteAllPostsOfUser({ userId }: DeleteAllPostsOfUserRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(userId, 'userId', 'deleteAllPostsOfUser');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<string>({
            url: '/api/users/{userId}/posts'.replace('{userId}', encodeURI(userId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    deletePost({ id }: DeletePostRequest): Observable<string>
    deletePost({ id }: DeletePostRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    deletePost({ id }: DeletePostRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(id, 'id', 'deletePost');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<string>({
            url: '/api/posts/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getAllPosts({ page, size }: GetAllPostsRequest): Observable<{ [key: string]: object; }>
    getAllPosts({ page, size }: GetAllPostsRequest, opts?: OperationOpts): Observable<AjaxResponse<{ [key: string]: object; }>>
    getAllPosts({ page, size }: GetAllPostsRequest, opts?: OperationOpts): Observable<{ [key: string]: object; } | AjaxResponse<{ [key: string]: object; }>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (size != null) { query['size'] = size; }

        return this.request<{ [key: string]: object; }>({
            url: '/api/posts',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getAllPostsByUserId({ id }: GetAllPostsByUserIdRequest): Observable<Array<Post>>
    getAllPostsByUserId({ id }: GetAllPostsByUserIdRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Post>>>
    getAllPostsByUserId({ id }: GetAllPostsByUserIdRequest, opts?: OperationOpts): Observable<Array<Post> | AjaxResponse<Array<Post>>> {
        throwIfNullOrUndefined(id, 'id', 'getAllPostsByUserId');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<Array<Post>>({
            url: '/api/users/{id}/posts'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getPostById({ id }: GetPostByIdRequest): Observable<Post>
    getPostById({ id }: GetPostByIdRequest, opts?: OperationOpts): Observable<AjaxResponse<Post>>
    getPostById({ id }: GetPostByIdRequest, opts?: OperationOpts): Observable<Post | AjaxResponse<Post>> {
        throwIfNullOrUndefined(id, 'id', 'getPostById');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<Post>({
            url: '/api/posts/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getProfilePicture(): Observable<object>
    getProfilePicture(opts?: OperationOpts): Observable<AjaxResponse<object>>
    getProfilePicture(opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<object>({
            url: '/api/user/picture',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    updatePost({ id, postRequest }: UpdatePostRequest): Observable<Post>
    updatePost({ id, postRequest }: UpdatePostRequest, opts?: OperationOpts): Observable<AjaxResponse<Post>>
    updatePost({ id, postRequest }: UpdatePostRequest, opts?: OperationOpts): Observable<Post | AjaxResponse<Post>> {
        throwIfNullOrUndefined(id, 'id', 'updatePost');
        throwIfNullOrUndefined(postRequest, 'postRequest', 'updatePost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<Post>({
            url: '/api/posts/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: postRequest,
        }, opts?.responseOpts);
    };

    /**
     */
    uploadProfilePic({ file }: UploadProfilePicRequest): Observable<object>
    uploadProfilePic({ file }: UploadProfilePicRequest, opts?: OperationOpts): Observable<AjaxResponse<object>>
    uploadProfilePic({ file }: UploadProfilePicRequest, opts?: OperationOpts): Observable<object | AjaxResponse<object>> {
        throwIfNullOrUndefined(file, 'file', 'uploadProfilePic');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }

        return this.request<object>({
            url: '/api/user/picture',
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

}

// tslint:disable
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    AddCommentOnPostRequest,
    Comment,
    ErrorMessage,
} from '../models';

export interface AddCommentOnPostRequest {
    id: number;
    addCommentOnPostRequest: AddCommentOnPostRequest;
}

export interface GetPostCommentsByIdRequest {
    id: number;
}

/**
 * no description
 */
export class CommentControllerApi extends BaseAPI {

    /**
     */
    addCommentOnPost({ id, addCommentOnPostRequest }: AddCommentOnPostRequest): Observable<Array<Comment>>
    addCommentOnPost({ id, addCommentOnPostRequest }: AddCommentOnPostRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Comment>>>
    addCommentOnPost({ id, addCommentOnPostRequest }: AddCommentOnPostRequest, opts?: OperationOpts): Observable<Array<Comment> | AjaxResponse<Array<Comment>>> {
        throwIfNullOrUndefined(id, 'id', 'addCommentOnPost');
        throwIfNullOrUndefined(addCommentOnPostRequest, 'addCommentOnPostRequest', 'addCommentOnPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<Array<Comment>>({
            url: '/api/posts/{id}/comments'.replace('{id}', encodeURI(id)),
            method: 'POST',
            headers,
            body: addCommentOnPostRequest,
        }, opts?.responseOpts);
    };

    /**
     */
    getPostCommentsById({ id }: GetPostCommentsByIdRequest): Observable<Array<Comment>>
    getPostCommentsById({ id }: GetPostCommentsByIdRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Comment>>>
    getPostCommentsById({ id }: GetPostCommentsByIdRequest, opts?: OperationOpts): Observable<Array<Comment> | AjaxResponse<Array<Comment>>> {
        throwIfNullOrUndefined(id, 'id', 'getPostCommentsById');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Authorization authentication
        };

        return this.request<Array<Comment>>({
            url: '/api/posts/{id}/comments'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
